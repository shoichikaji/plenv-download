#!/usr/bin/env bash

# Provide plenv completions

HELP='
Usage: plenv download [options] VERSION

Options:
  -l, --list     show available versions
  -g, --global   execute `plenv global` after installing
      --as=NAME  install perl as NAME (default: relocatable-VERSION)
  -h, --help     show this help

Examples:
 $ plenv download --list
 $ plenv download latest    # automatically download latest version
 $ plenv download 5.34.1.0
 $ plenv download 5.34.1.0 --as test-perl
'

set -eu

info() {
  echo "$@" >&2
}

die() {
  info "$@"
  exit 1
}

http_get() {
  local url=$1
  if curl --version >/dev/null 2>&1; then
    curl -fsSL $url
  elif wget --version >/dev/null 2>&1; then
    wget -q -O - $url
  else
    die "Need curl or wget"
  fi
}

http_download() {
  local url=$1
  local target=$2
  if curl --version >/dev/null 2>&1; then
    curl -fsSL -o $target $url
  elif wget --version >/dev/null 2>&1; then
    wget -q -O $target $url
  else
    die "Need curl or wget"
  fi
}

unpack() {
  local tarball=$1
  local target=$2
  local cmd=
  if gtar --version >/dev/null 2>&1; then
    cmd=gtar
  elif tar --version >/dev/null 2>&1; then
    cmd=tar
  else
    die "Need tar"
  fi
  if [[ ! -e $target ]]; then
    mkdir -p $target
  fi
  $cmd xf $tarball --strip-components=1 -C $target
}

has_xz() {
  if xz --version >/dev/null 2>&1; then
    return 0
  else
    return 1
  fi
}

RELEASES_CSV_URL=https://raw.githubusercontent.com/skaji/relocatable-perl/master/releases.csv

available_versions() {
  local os=$1
  local arch=$2
  http_get $RELEASES_CSV_URL | \grep ,$os, | \grep ,$arch, | \grep ,xz, | \cut -d, -f1
}

latest_version() {
  local os=$1
  local arch=$2
  http_get $RELEASES_CSV_URL | \grep ,$os, | \grep ,$arch, | \grep ,xz, | \cut -d, -f1 | \head -1
}

download_url() {
  local os=$1
  local arch=$2
  local version=$3
  local compress=$4
  http_get $RELEASES_CSV_URL | \grep ,$os, | \grep ,$arch, | \grep $version, | \grep ,$compress, | \cut -d, -f5
}

main() {
  local option_list=
  local option_global=
  local option_help=
  local option_complete=
  local option_as=
  local argv=()
  local _argv=("$@")
  local _v
  while [[ ${#_argv[@]} -gt 0 ]]; do
    case "${_argv[0]}" in
    --list | -l)
      option_list=1
      _argv=("${_argv[@]:1}")
      ;;
    --global | -g)
      option_global=1
      _argv=("${_argv[@]:1}")
      ;;
    --help | -h)
      option_help=1
      _argv=("${_argv[@]:1}")
      ;;
    --complete)
      option_complete=1
      _argv=("${_argv[@]:1}")
      ;;
    --as | --as=*)
      if [[ ${_argv[0]} =~ ^--as= ]]; then
        _v="${_argv[0]##--as=}"
        _argv=("${_argv[@]:1}")
      else
        if [[ ${#_argv[@]} -eq 1 ]] || [[ ${_argv[1]} =~ ^- ]]; then
          echo "${_argv[0]} option requires an argument" >&2
          return 1
        fi
        _v="${_argv[1]}"
        _argv=("${_argv[@]:2}")
      fi
      option_as="$_v"
      ;;
    -[a-zA-Z0-9][a-zA-Z0-9]*)
      _v="${_argv[0]:1}"
      _argv=($(echo "$_v" | \grep -o . | \sed -e 's/^/-/') "${_argv[@]:1}")
      ;;
    -?*)
      echo "Unknown option ${_argv[0]}" >&2
      return 1
      ;;
    *)
      argv+=("${_argv[0]}")
      _argv=("${_argv[@]:1}")
      ;;
    esac
  done

  if [[ -n $option_complete ]]; then
    # TODO
    return 0
  fi

  if [[ -n $option_help ]]; then
    echo "$HELP"
    return 1
  fi

  local os=$(uname -s | tr '[:upper:]' '[:lower:]')
  local arch=$(uname -m)
  if [[ "$os $arch" = "darwin x86_64" ]] || [[ "$os $arch" = "linux x86_64" ]] || [[ "$os $arch" = "linux aarch64" ]]; then
    : # OK
  else
    die "Unsupported environment: $os $arch"
  fi

  if [[ -n $option_list ]]; then
    available_versions $os $arch
    return 0
  fi

  if [[ ${#argv[@]} -eq 0 ]]; then
    die 'Need version argument, try `plenv download --help`'
  fi

  local root=${PLENV_ROOT-$HOME/.plenv}

  local version=${argv[0]}
  if [[ $version = latest ]]; then
    version=$(latest_version $os $arch)
  fi

  local name=relocatable-$version
  if [[ -n $option_as ]]; then
    name=$option_as
  fi
  local prefix=$root/versions/$name
  if [[ -e $prefix ]]; then
    die "Already exists $prefix"
  fi

  local compress=gz
  if has_xz; then
    compress=xz
  fi

  local url=$(download_url $os $arch $version $compress)
  if [[ -z $url ]]; then
    die "Unknown version '$version', try \`plenv download --list\`"
  fi

  local cache_dir=$root/cache/relocatable-$version
  if [[ ! -d $cache_dir ]]; then
    mkdir -p $cache_dir
  fi

  local local_tarball=$cache_dir/${url##*/}
  if [[ ! -e $local_tarball ]]; then
    info "Downloading $url"
    http_download $url $local_tarball
  fi

  info "Unpacking $local_tarball"
  unpack $local_tarball $prefix
  if [[ -n $option_global ]]; then
    info "Successfully installed $version"
    info "Executing plenv global $name"
    plenv global $name
  else
    info "Successfully installed $version, try \`plenv global $name\`"
  fi
}

main "$@"
