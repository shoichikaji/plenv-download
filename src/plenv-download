#!/usr/bin/env perl
use 5.008001;
use strict;
use warnings;

package App;
use Cwd ();
use File::Basename ();
use File::Copy ();
use File::Path ();
use File::Temp ();
use File::pushd ();
use Getopt::Long qw(:config no_auto_abbrev no_ignore_case bundling);
use HTTP::Tinyish;
use JSON::PP ();

our $VERSION = '0.05';
our $RELEASE_URL = "https://github.com/skaji/relocatable-perl/releases/download/%s/perl-%s.%s";
our $LATEST_URL = 'https://raw.githubusercontent.com/skaji/relocatable-perl/master/LATEST';

sub _numify {
    my $v = shift;
    my ($v2, $v1, $v0, $v_1) = split /\./, $v;
    return 0 unless defined $v0;
    $v2*(100**2) + $v1*100 + $v0 + ($v_1 || 0)/100;
}
sub new { bless {}, shift }
sub run {
    my ($self, @argv) = @_;
    $self = $self->new unless ref $self;
    local @ARGV = @argv;
    GetOptions
        "l|list"    => sub { $self->cmd_list; exit },
        "h|help"    => sub { $self->cmd_help; exit },
        "v|version" => sub { print "plenv-download version $VERSION\n"; exit },
        "as=s"      => \my $as,
    or exit 1;

    my $version = shift @ARGV;
    die "Missing version argument, try `plenv download --help`\n" unless $version;
    $version = $self->latest_version if $version =~ /latest/i;

    my $archname = $self->archname
        or die "Sorry, there is no precompiled perls for your platform\n";

    my $url = sprintf $RELEASE_URL,
        $version, $archname, $self->take_xz($version) ? "tar.xz" : "tar.gz";

    my $root = $ENV{PLENV_ROOT} || "$ENV{HOME}/.plenv";
    my $target = $as ? "$root/versions/$as" : "$root/versions/relocatable-$version";
    die "Already exists $target\n" if -e $target;
    my $cache_root = $ENV{PLENV_DOWNLOAD_CACHE} || "$root/cache";
    my $cache_dir = "$cache_root/relocatable-$version";
    my $cache = "$cache_dir/" . File::Basename::basename($url);

    if (-f $cache) {
        warn "Using cache $cache\n";
    } else {
        (undef, my $temp) = File::Temp::tempfile(UNLINK => 0, EXLOCK => 0, OPEN => 0);
        warn "Downloading $url\n";
        eval { $self->download($url => $temp) };
        if (my $error = $@) {
            unlink $temp;
            die $error;
        } else {
            File::Path::mkpath($cache_dir) unless -d $cache_dir;
            chmod 0644, $temp;
            File::Copy::move($temp, $cache) or die $!;
        }
    }
    $self->install($cache => $target);
    my $name = "relocatable-$version" . ($as ? " (as $as)" : "");
    warn "Successfully installed $name, try `plenv versions`\n";
}

sub take_xz {
    my ($self, $version) = @_;
    `xz --version >/dev/null 2>&1`;
    return if $? != 0;
    if ($version =~ /^5\.(\d+)\.(\d+)\.(\d+)$/) {
        my $v = $1 * 1_000_000 + $2 * 1_000 + $3;
        return 1 if $v >= 26_001_001;
    }
    return;
}

sub archname {
    my $uname = `uname -sm`;
    chomp $uname;
    if ($uname =~ /^Darwin\s+x86_64$/i) {
        "darwin-2level";
    } elsif ($uname =~ /^Linux\s+x86_64$/i) {
        "x86_64-linux";
    } else {
        "";
    }
}

sub cmd_help {
    my $self = shift;
    print <main::DATA>;
    close main::DATA;
}
sub cmd_list {
    my $self = shift;
    my $available = $self->available;
    for my $i (0 .. $#{$available}) {
        my $version = $available->[$i]{version};
        my $body    = $available->[$i]{body};
        print $version;
        if ($body) {
            chomp $body;
            $body =~ s/\n/ /g;
            print " ($body)";
        }
        print "  **LATEST**" if $i == $#{$available};
        print "\n";
    }
}

sub install {
    my ($self, $tarball, $as) = @_;
    my $tempdir = File::Temp::tempdir(CLEANUP => 1);
    my $guard = File::pushd::pushd($tempdir);

    my %tar_option = (gz => "xzf", bz2 => "xjf", xz => "xJf");
    (my $target = File::Basename::basename($tarball)) =~ s/\.tar\.(gz|bz2|xz)$//;
    my $tar_option = $tar_option{$1};
    system "tar", $tar_option, $tarball;
    die "Failed `tar $tar_option $tarball`\n" if $? != 0 || !-d $target;
    File::Copy::move($target, $as)
        or die "Faile to move $target to $as: $!\n";
}

sub download {
    my ($self, $url, $target) = @_;
    my $res = HTTP::Tinyish->new(timeout => 5*60, verify_SSL => 1)->mirror($url => $target);
    if ($res->{success}) {
        my $cmd = $url =~ /\.xz$/ ? "xz" : $url =~ /\.bz2$/ ? "bzip2" : "gz";
        !system $cmd, "--test", $target or die;
        return 1;
    } else {
        unlink $target;
        die "$res->{status} $res->{reason}, $url\n";
    }
}

sub latest_version {
    my $self = shift;
    my $res = HTTP::Tinyish->new->get($LATEST_URL);
    if ($res->{success}) {
        my $latest = $res->{content};
        chomp $latest;
        $latest;
    } else {
        die "Failed to get $LATEST_URL: $res->{status} $res->{reason}\n";
    }
}

sub available {
    my $self = shift;
    return $self->{available} if $self->{available};
    my $url = "https://api.github.com/repos/skaji/relocatable-perl/releases";
    my $res = HTTP::Tinyish->new->get($url);
    die "$res->{status} $res->{reason}, $url\n" unless $res->{success};
    my $releases = JSON::PP::decode_json($res->{content});
    my @release;
    for my $r (@$releases) {
        my $version = $r->{tag_name};
        my $assets  = $r->{assets};
        my $body    = $r->{body};
        $body =~ s/^[*-]\s+//gsm;
        $body =~ s/\r\n/ /g;
        my %url;
        for my $asset (@$assets) {
            my $url = $asset->{"browser_download_url"};
            if ($asset->{name} eq "perl-darwin-2level.tar.gz") {
                $url{"darwin-2level"} = $url;
            } elsif ($asset->{name} eq "perl-x86_64-linux.tar.gz") {
                $url{"x86_64-linux"} = $url;
            }
        }
        push @release, { version => $version, body => $body, url => \%url } if %url;
    }
    $self->{available} = [
        sort { _numify($a->{version}) <=> _numify($b->{version}) }
        grep { _numify($_->{version}) }
        @release
    ];
}

package main;
App->run(@ARGV);

__DATA__

Summary: Download precompiled perl binaries
 from https://github.com/skaji/relocatable-perl

Usage: plenv download [options] <version>

  -l, --list       list all available versions
      --as=NAME    download a precompiled perl binary as NAME
  -v, --version    show version and exit
  -h, --help       show this help

Examples:
 $ plenv download latest    # automatically donwload latest perl
 $ plenv donwload 5.22.0.0
 $ plenv download --list

